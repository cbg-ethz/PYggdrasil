"""Snakemake file defining the workflows"""


# mock data parameters
params_md = dict()
params_md["seed"] = [32]
params_md["n_tree"] = 3
params_md["n_cells"] = 500
params_md["n_mutations"] = 8
params_md["strategy"] = ["""UNIFORM_INCLUDE_ROOT""", """UNIFORM_EXCLUDE_ROOT"""]
params_md["fpr"] = 1.24*10**(-6)
params_md["fnr"] = 0.097
params_md["na_rate"] = 0.014
params_md["observe_homozygous"] = ["False", "True"]


rule all:
    """Run all."""
    input:
        mock_data = expand('../data/mock/seed_{seed}_n_trees_{n_trees}_n_cells_{n_cells}_n_mutations_{n_mutations}_fpr_{fpr}_fnr_{fnr}_na_rate_{na_rate}_observe_homozygous_{observe_homozygous}_strategy_{strategy}_tree_{tree_no}.json',
                            seed=params_md["seed"],
                            n_trees=params_md["n_tree"],
                            n_cells=params_md["n_cells"],
                            n_mutations=params_md["n_mutations"],
                            strategy=params_md["strategy"],
                            fpr=params_md["fpr"],
                            fnr=params_md["fnr"],
                            na_rate=params_md["na_rate"],
                            observe_homozygous=params_md["observe_homozygous"],
                            tree_no= list(range(1, params_md["n_tree"]+1))
                        ),
        mcmc_log_mark0ÃŸ = '../data/mcmc/mark00/mcmc_run.log',
        mcmc_samples_mark00 = '../data/mcmc/mark00/samples.json'



rule make_random_or_deep_tree:
    """Make a tree (TreeNode) of random/deep topology and save it as JSON."""
    input:
        script="../scripts/make_tree.py"
    output:
        tree="../data/{experiment}/trees/T_{tree_type}_{n_nodes}_{tree_seed}.json"
    shell:
        """
        poetry run python {input.script} \
            --out_dir ../data/{wildcards.experiment}/trees \
            --seed {wildcards.tree_seed} \
            --n_nodes {wildcards.n_nodes} \
            --tree_type {wildcards.tree_type}
        """

rule make_star_tree:
    """"Make a tree (TreeNode) of star topology and save it as JSON."""
    input:
        script="../scripts/make_tree.py"
    output:
        tree="../data/{experiment}/trees/T_s_{n_nodes}.json"
    shell:
        """
        poetry run python {input.script} \
            --out_dir ../data/{wildcards.experiment}/trees \
            --n_nodes {wildcards.n_nodes} \
            --tree_type s
        """


rule gen_cell_simulation:
    """Generate a mutation matrix given a true tree and save to JSON."""
    input:
        script="../scripts/cell_simulation.py",
        true_tree = "../data/{experiment}/trees/{true_tree_id}.json"
    output:
        mutation_data = "../data/{experiment}/mutations/CS_{CS_seed}-{true_tree_id}-{n_cells}_{CS_fpr}_{CS_fnr}_{CS_na}_{observe_homozygous}_{cell_attachment_strategy}.json"
    shell:
        """
        poetry run python {input.script} \
        --seed {wildcards.CS_seed} \
        --true_tree_fp {input.true_tree} \
        --n_cells {wildcards.n_cells} \
        --fpr {wildcards.CS_fpr} \
        --fnr {wildcards.CS_fnr} \
        --na_rate {wildcards.CS_na} \
        --observe_homozygous {wildcards.observe_homozygous} \
        --strategy {wildcards.cell_attachment_strategy} \
        --out_dir ../data/{wildcards.experiment}/mutations \
        """




# MCMC parameters of mark00
params_mcmc = dict()
params_mcmc["seed"] = 42
params_mcmc["n_trees"] = 1
params_mcmc["n_cells"] = 2000
params_mcmc["n_mutations"] = 50
params_mcmc["strategy"] = """UNIFORM_INCLUDE_ROOT"""
params_mcmc["fpr"] = 1.24*10**(-6)
params_mcmc["fnr"] = 0.097
params_mcmc["na_rate"] = 0.014
params_mcmc["observe_homozygous"] = "False"

rule run_mcmc_mark00:
    """Run MCMC on mock data."""
    input:
        script = "../scripts/run_mcmc.py",
        data =  expand('../data/mock/seed_{seed}_n_trees_{n_trees}_n_cells_{n_cells}_n_mutations_{n_mutations}_fpr_{fpr}_fnr_{fnr}_na_rate_{na_rate}_observe_homozygous_{observe_homozygous}_strategy_{strategy}_tree_{tree_no}.json',
                        seed=params_mcmc["seed"],
                        n_trees=params_mcmc["n_trees"],
                        n_cells=params_mcmc["n_cells"],
                        n_mutations=params_mcmc["n_mutations"],
                        strategy=params_mcmc["strategy"],
                        fpr=params_mcmc["fpr"],
                        fnr=params_mcmc["fnr"],
                        na_rate=params_mcmc["na_rate"],
                        observe_homozygous=params_mcmc["observe_homozygous"],
                        tree_no= 1
                        ),
            config_file = "config/mcmc_config_mark00.json"
    output:
        mcmc_log = '../data/mcmc/mark00/mcmc_run.log',
        mcmc_samples = '../data/mcmc/mark00/samples.json'
    params:
        out_dir = "../data/mcmc/mark00",
    shell:
        """
        poetry run python {input.script} \
            --data_fp {input.data} \
            --config_fp {input.config_file} \
            --out_dir {params.out_dir}
        """


## TODO (Gordon): integrated in the above

import json

from pyggdrasil.tree_inference import McmcConfig, MoveProbConfig, MoveProbConfigOptions, McmcConfigOptions



####

# define the move probabilities manually
custom_MP_conf = MoveProbConfig(
    prune_and_reattach=0.1,
    swap_node_labels=0.65,
    swap_subtrees=0.25
)

# choose the optimal move probabilities, by enums
optimal_MP_conf = MoveProbConfigOptions.OPTIMAL


# Set the Model manually
customMcmcConfig = McmcConfigOptions.TEST.value


# TODO (Gordon): adjust to new run_mcmc.py
rule mcmc_mark00_no_config:
    """Run MCMC on mock data."""
    params:
        out_dir = "../data/mcmc/mark00",
        config =json.dumps(customMcmcConfig.dict())

    input:
        script = "../scripts/run_mcmc.py",
        data =  expand('../data/mock/seed_{seed}_n_trees_{n_trees}_n_cells_{n_cells}_n_mutations_{n_mutations}_fpr_{fpr}_fnr_{fnr}_na_rate_{na_rate}_observe_homozygous_{observe_homozygous}_strategy_{strategy}_tree_{tree_no}.json',
                        seed=params_mcmc["seed"],
                        n_trees=params_mcmc["n_trees"],
                        n_cells=params_mcmc["n_cells"],
                        n_mutations=params_mcmc["n_mutations"],
                        strategy=params_mcmc["strategy"],
                        fpr=params_mcmc["fpr"],
                        fnr=params_mcmc["fnr"],
                        na_rate=params_mcmc["na_rate"],
                        observe_homozygous=params_mcmc["observe_homozygous"],
                        tree_no= 1
                        ),
    output:
        mcmc_log = '../data/mcmc/mark00/mcmc_run.log',
        mcmc_samples = '../data/mcmc/mark00/samples.json'
    shell:
        """
        poetry run python {input.script} \
            --data_fp {input.data} \
            --config_fp {params.config} \
            --out_dir {params.out_dir}
        """